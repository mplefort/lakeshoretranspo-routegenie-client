import { app, BrowserWindow, ipcMain } from 'electron';
import { HelloService } from './services/hello';
import { BillingWorkflowInteractive, BillingWorkflowFormInputs } from './commands/billingWorkflowInteractive';
import { updateElectronApp } from 'update-electron-app';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

if (!process.env.NODE_ENV || process.env.NODE_ENV === 'production') {
  updateElectronApp({
    updateInterval: '1 hour', // Check for updates every hour
    logger: require('electron-log')
  });
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    icon: process.platform === 'win32' ? 'src/img/LST_icon_win.ico' : 
          process.platform === 'darwin' ? 'src/img/LST_icon_mac.icns' : 
          'src/img/LST_icon_win.ico', // fallback for Linux
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// Set up IPC handlers
const setupIpcHandlers = () => {
  // Hello service IPC handlers
  ipcMain.handle('hello:getMessage', async () => {
    console.log('Hello message requested');
    return HelloService.getHelloMessage();
  });

  ipcMain.handle('hello:getCustomMessage', async (event, name: string) => {
    console.log('Custom hello message requested for:', name);
    return HelloService.getCustomMessage(name);
  });

  // Existing QB sync handler
  ipcMain.handle('qb:sync', async (event, data: any) => {
    console.log('QB sync requested:', data);
    // TODO: Implement QB sync logic
    // This will call your qbSync service
  });

  // Billing workflow handler
  ipcMain.handle('billingWorkflow:execute', async (event, inputs: BillingWorkflowFormInputs) => {
    console.log('Billing workflow requested:', inputs);
    try {
      const workflow = new BillingWorkflowInteractive();
      const result = await workflow.runFromFormInputs(inputs);
      return result;
    } catch (error: any) {
      console.error('Billing workflow error:', error);
      return {
        success: false,
        message: `Workflow failed: ${error.message || error}`,
        outputDir: inputs.outputFolder
      };
    }
  });
};

// Set up IPC handlers before creating windows
setupIpcHandlers();